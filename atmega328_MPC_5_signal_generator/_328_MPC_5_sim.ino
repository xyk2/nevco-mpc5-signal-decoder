#include <util/delay.h>

uint8_t packet[] = {1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,1,1,1,1,0,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1};

void setup() {                
  DDRB  = 0x0F;
  noInterrupts();
}

void loop() {
  while(1) {
    pulse_start_bit();
    pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(1);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(0);
pulse_bit(1);
pulse_bit(0);
pulse_bit(0);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);
pulse_bit(1);

  }
}

void inline pulse_start_bit() { 
    PORTB = 0x01;  
    __builtin_avr_delay_cycles(124);
    PORTB = 0x00; 
    __builtin_avr_delay_cycles(10);
}

void inline pulse_bit(uint8_t bit_type) { //0 LOW, 1 HIGH
    PORTB = 0x01;
    if(bit_type) __builtin_avr_delay_cycles(49);
    else __builtin_avr_delay_cycles(10);
    PORTB = 0x00; 
    if(bit_type) __builtin_avr_delay_cycles(10);
    else __builtin_avr_delay_cycles(49);
}
